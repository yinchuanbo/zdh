#!/usr/bin/env node

/**
 * Module dependencies.
 */

// 添加全局错误处理
process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err.message);
  console.error(err.stack);
  console.log('Press any key to exit...');
  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.on('data', process.exit.bind(process, 1));
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

var app = null

try {
  var createApp = require("../app");
  app = createApp();
} catch (err) {
  console.error('Failed to create app:', err.message);
  console.error(err.stack);
  console.log('Press any key to exit...');
  process.stdin.setRawMode(true);
  process.stdin.resume();
  process.stdin.on('data', process.exit.bind(process, 1));
}
var debug = require("debug")("zdh:server");
var http = require("http");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "*", // 允许所有来源，或者根据需求限制某些域名
    methods: ["GET", "POST", "PUT", "DELETE"],
    credentials: true,
  },
});


io.on("connection", (socket) => {
  console.log("a user connected");
  socket.on("chat message", (msg) => {
    console.log("message: " + msg);
    io.emit("chat message", msg);
  });
  
  socket.on("disconnect", () => {
    console.log("user disconnected");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  
  console.log('\n==============================================');
  console.log('🚀 ZDH Application Started Successfully!');
  console.log('==============================================');
  console.log(`📡 Server running on: http://localhost:${addr.port}`);
  console.log(`🕐 Started at: ${new Date().toLocaleString()}`);
  console.log('💡 Press Ctrl+C to stop the server');
  console.log('==============================================\n');
}
